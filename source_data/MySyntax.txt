-*- ===================================================================================================================
;                                          /***   RBNF grammar  ***\

Grammar            :: = 'Breakfast:' {FunctionDefinition | DeclareFunction | DeclareID}+ 'end'

FunctionDefinition :: = ID '_' {ID skip}* '_' Body

Assignment         :: = ID 'yes-yes' CallFunction | Expression

If                 :: = Comparison 'double-yummy' Body
While              :: = 'golubino-shpioniro' Comparison  Body

Comparison         :: = CallFunction | Expression ['<'| '<=' | '!=' | '==' | '>=' | '>']  CallFunction | Expression

Body               :: = 'want-millpops' { CallFunction | If | While| Assignment | DeclareID }+ 'dirty'

CallFunction       :: = ID '(' {Expression | CallFunction skip}* ')' 'norm' | 'cringe'
DeclareFunction    :: = ID '_' Number '_' ['norm' | 'cringe']
DeclareID          :: = ID ['norm' | 'cringe']

Expression         :: = Term { ['+vibe','-vibe'] Term}*
Term               :: = Pow {['*', '/'] Pow }*
Pow                :: = PrimaryExpression {[ '^' ] PrimaryExpression}*
PrimaryExpression  :: = BracketExpression  | ID | Number
BracketExpression  :: = '(' Expression ')'
Number             :: = ['0' - '9']+
ID                 :: = ['a' - 'Z' | '_' | '+' | '-' |'0' - '9']+
--------------------------------------------------------------------------------------------------------------------
-*-
Breakfast:

    damir cringe
    MyDefaultBreakfast _ 0 _ norm
    Factorial _ 1 _ cringe

    MyDefaultBreakfast _ 0 _
    want-millpops
        danek norm
        damir cringe

        x norm x yes-yes 5
        x == 5 double-yummy
        want-millpops
            Factorial ( x skip ) norm
        dirty

    dirty

end

-*-
//-----------------------------------
double factorial_recursive (double n)
{
    if (n == 0.0 || n == 1.0)
        return 1.0;

    return n * factorial (n - 1.0)
}
//-----------------------------------
double factorial_cycle (double n)
{
    if (n == 0.0 || n == 1.0)
        return 1.0;

    double i;
    double i = 1.0;

    double sum;
    double sum = 1.0;

    while (x < n)
    {
        sum = sum * (sum + 1.0);
        x++;
    }

    return sum
}
//-----------------------------------
